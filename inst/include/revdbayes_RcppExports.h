// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_revdbayes_RCPPEXPORTS_H_GEN_
#define RCPP_revdbayes_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace revdbayes {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("revdbayes", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("revdbayes", "revdbayes_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in revdbayes");
            }
        }
    }

    inline double loggp(const Rcpp::NumericVector& x, const Rcpp::List& ss) {
        typedef SEXP(*Ptr_loggp)(SEXP,SEXP);
        static Ptr_loggp p_loggp = NULL;
        if (p_loggp == NULL) {
            validateSignature("double(*loggp)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_loggp = (Ptr_loggp)R_GetCCallable("revdbayes", "revdbayes_loggp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_loggp(Rcpp::wrap(x), Rcpp::wrap(ss));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP loglik_xptr(std::string fstr) {
        typedef SEXP(*Ptr_loglik_xptr)(SEXP);
        static Ptr_loglik_xptr p_loglik_xptr = NULL;
        if (p_loglik_xptr == NULL) {
            validateSignature("SEXP(*loglik_xptr)(std::string)");
            p_loglik_xptr = (Ptr_loglik_xptr)R_GetCCallable("revdbayes", "revdbayes_loglik_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_loglik_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector gp_phi_to_theta(const Rcpp::NumericVector& phi, const Rcpp::List& user_args) {
        typedef SEXP(*Ptr_gp_phi_to_theta)(SEXP,SEXP);
        static Ptr_gp_phi_to_theta p_gp_phi_to_theta = NULL;
        if (p_gp_phi_to_theta == NULL) {
            validateSignature("Rcpp::NumericVector(*gp_phi_to_theta)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_phi_to_theta = (Ptr_gp_phi_to_theta)R_GetCCallable("revdbayes", "revdbayes_gp_phi_to_theta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_phi_to_theta(Rcpp::wrap(phi), Rcpp::wrap(user_args));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline SEXP phi_to_theta_xptr(std::string fstr) {
        typedef SEXP(*Ptr_phi_to_theta_xptr)(SEXP);
        static Ptr_phi_to_theta_xptr p_phi_to_theta_xptr = NULL;
        if (p_phi_to_theta_xptr == NULL) {
            validateSignature("SEXP(*phi_to_theta_xptr)(std::string)");
            p_phi_to_theta_xptr = (Ptr_phi_to_theta_xptr)R_GetCCallable("revdbayes", "revdbayes_phi_to_theta_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_phi_to_theta_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline double gp_mdi(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_mdi)(SEXP,SEXP);
        static Ptr_gp_mdi p_gp_mdi = NULL;
        if (p_gp_mdi == NULL) {
            validateSignature("double(*gp_mdi)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_mdi = (Ptr_gp_mdi)R_GetCCallable("revdbayes", "revdbayes_gp_mdi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_mdi(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_revdbayes_RCPPEXPORTS_H_GEN_
