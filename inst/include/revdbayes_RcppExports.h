// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_revdbayes_RCPPEXPORTS_H_GEN_
#define RCPP_revdbayes_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace revdbayes {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("revdbayes", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("revdbayes", "revdbayes_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in revdbayes");
            }
        }
    }

    inline bool any_nonpos(const Rcpp::NumericVector& x) {
        typedef SEXP(*Ptr_any_nonpos)(SEXP);
        static Ptr_any_nonpos p_any_nonpos = NULL;
        if (p_any_nonpos == NULL) {
            validateSignature("bool(*any_nonpos)(const Rcpp::NumericVector&)");
            p_any_nonpos = (Ptr_any_nonpos)R_GetCCallable("revdbayes", "revdbayes_any_nonpos");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_any_nonpos(Rcpp::wrap(x));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline double cpp_gp_loglik(const Rcpp::NumericVector& x, const Rcpp::List& ss) {
        typedef SEXP(*Ptr_cpp_gp_loglik)(SEXP,SEXP);
        static Ptr_cpp_gp_loglik p_cpp_gp_loglik = NULL;
        if (p_cpp_gp_loglik == NULL) {
            validateSignature("double(*cpp_gp_loglik)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_loglik = (Ptr_cpp_gp_loglik)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_loglik");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_loglik(Rcpp::wrap(x), Rcpp::wrap(ss));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_loglik(const Rcpp::NumericVector& x, const Rcpp::List& ss) {
        typedef SEXP(*Ptr_cpp_gev_loglik)(SEXP,SEXP);
        static Ptr_cpp_gev_loglik p_cpp_gev_loglik = NULL;
        if (p_cpp_gev_loglik == NULL) {
            validateSignature("double(*cpp_gev_loglik)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_loglik = (Ptr_cpp_gev_loglik)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_loglik");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_loglik(Rcpp::wrap(x), Rcpp::wrap(ss));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP loglik_xptr(std::string fstr) {
        typedef SEXP(*Ptr_loglik_xptr)(SEXP);
        static Ptr_loglik_xptr p_loglik_xptr = NULL;
        if (p_loglik_xptr == NULL) {
            validateSignature("SEXP(*loglik_xptr)(std::string)");
            p_loglik_xptr = (Ptr_loglik_xptr)R_GetCCallable("revdbayes", "revdbayes_loglik_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_loglik_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline double cpp_gp_norm(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_norm)(SEXP,SEXP);
        static Ptr_cpp_gp_norm p_cpp_gp_norm = NULL;
        if (p_cpp_gp_norm == NULL) {
            validateSignature("double(*cpp_gp_norm)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_norm = (Ptr_cpp_gp_norm)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_norm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_norm(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_mdi(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_mdi)(SEXP,SEXP);
        static Ptr_cpp_gp_mdi p_cpp_gp_mdi = NULL;
        if (p_cpp_gp_mdi == NULL) {
            validateSignature("double(*cpp_gp_mdi)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_mdi = (Ptr_cpp_gp_mdi)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_mdi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_mdi(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_flat(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_flat)(SEXP,SEXP);
        static Ptr_cpp_gp_flat p_cpp_gp_flat = NULL;
        if (p_cpp_gp_flat == NULL) {
            validateSignature("double(*cpp_gp_flat)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_flat = (Ptr_cpp_gp_flat)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_flat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_flat(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_flatflat(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_flatflat)(SEXP,SEXP);
        static Ptr_cpp_gp_flatflat p_cpp_gp_flatflat = NULL;
        if (p_cpp_gp_flatflat == NULL) {
            validateSignature("double(*cpp_gp_flatflat)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_flatflat = (Ptr_cpp_gp_flatflat)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_flatflat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_flatflat(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_jeffreys(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_jeffreys)(SEXP,SEXP);
        static Ptr_cpp_gp_jeffreys p_cpp_gp_jeffreys = NULL;
        if (p_cpp_gp_jeffreys == NULL) {
            validateSignature("double(*cpp_gp_jeffreys)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_jeffreys = (Ptr_cpp_gp_jeffreys)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_jeffreys");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_jeffreys(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_beta(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gp_beta)(SEXP,SEXP);
        static Ptr_cpp_gp_beta p_cpp_gp_beta = NULL;
        if (p_cpp_gp_beta == NULL) {
            validateSignature("double(*cpp_gp_beta)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_beta = (Ptr_cpp_gp_beta)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_beta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_beta(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_norm(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_norm)(SEXP,SEXP);
        static Ptr_cpp_gev_norm p_cpp_gev_norm = NULL;
        if (p_cpp_gev_norm == NULL) {
            validateSignature("double(*cpp_gev_norm)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_norm = (Ptr_cpp_gev_norm)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_norm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_norm(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_loglognorm(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_loglognorm)(SEXP,SEXP);
        static Ptr_cpp_gev_loglognorm p_cpp_gev_loglognorm = NULL;
        if (p_cpp_gev_loglognorm == NULL) {
            validateSignature("double(*cpp_gev_loglognorm)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_loglognorm = (Ptr_cpp_gev_loglognorm)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_loglognorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_loglognorm(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_mdi(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_mdi)(SEXP,SEXP);
        static Ptr_cpp_gev_mdi p_cpp_gev_mdi = NULL;
        if (p_cpp_gev_mdi == NULL) {
            validateSignature("double(*cpp_gev_mdi)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_mdi = (Ptr_cpp_gev_mdi)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_mdi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_mdi(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_flat(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_flat)(SEXP,SEXP);
        static Ptr_cpp_gev_flat p_cpp_gev_flat = NULL;
        if (p_cpp_gev_flat == NULL) {
            validateSignature("double(*cpp_gev_flat)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_flat = (Ptr_cpp_gev_flat)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_flat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_flat(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_flatflat(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_flatflat)(SEXP,SEXP);
        static Ptr_cpp_gev_flatflat p_cpp_gev_flatflat = NULL;
        if (p_cpp_gev_flatflat == NULL) {
            validateSignature("double(*cpp_gev_flatflat)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_flatflat = (Ptr_cpp_gev_flatflat)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_flatflat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_flatflat(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gev_beta(const Rcpp::NumericVector& x, const Rcpp::List& ppars) {
        typedef SEXP(*Ptr_cpp_gev_beta)(SEXP,SEXP);
        static Ptr_cpp_gev_beta p_cpp_gev_beta = NULL;
        if (p_cpp_gev_beta == NULL) {
            validateSignature("double(*cpp_gev_beta)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gev_beta = (Ptr_cpp_gev_beta)R_GetCCallable("revdbayes", "revdbayes_cpp_gev_beta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gev_beta(Rcpp::wrap(x), Rcpp::wrap(ppars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP logprior_xptr(std::string fstr) {
        typedef SEXP(*Ptr_logprior_xptr)(SEXP);
        static Ptr_logprior_xptr p_logprior_xptr = NULL;
        if (p_logprior_xptr == NULL) {
            validateSignature("SEXP(*logprior_xptr)(std::string)");
            p_logprior_xptr = (Ptr_logprior_xptr)R_GetCCallable("revdbayes", "revdbayes_logprior_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_logprior_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline double cpp_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_cpp_logpost)(SEXP,SEXP);
        static Ptr_cpp_logpost p_cpp_logpost = NULL;
        if (p_cpp_logpost == NULL) {
            validateSignature("double(*cpp_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_logpost = (Ptr_cpp_logpost)R_GetCCallable("revdbayes", "revdbayes_cpp_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_gp_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_cpp_gp_logpost)(SEXP,SEXP);
        static Ptr_cpp_gp_logpost p_cpp_gp_logpost = NULL;
        if (p_cpp_gp_logpost == NULL) {
            validateSignature("double(*cpp_gp_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_cpp_gp_logpost = (Ptr_cpp_gp_logpost)R_GetCCallable("revdbayes", "revdbayes_cpp_gp_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_gp_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_mdi_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_mdi_logpost)(SEXP,SEXP);
        static Ptr_gp_mdi_logpost p_gp_mdi_logpost = NULL;
        if (p_gp_mdi_logpost == NULL) {
            validateSignature("double(*gp_mdi_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_mdi_logpost = (Ptr_gp_mdi_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_mdi_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_mdi_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_norm_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_norm_logpost)(SEXP,SEXP);
        static Ptr_gp_norm_logpost p_gp_norm_logpost = NULL;
        if (p_gp_norm_logpost == NULL) {
            validateSignature("double(*gp_norm_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_norm_logpost = (Ptr_gp_norm_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_norm_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_norm_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_flat_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_flat_logpost)(SEXP,SEXP);
        static Ptr_gp_flat_logpost p_gp_flat_logpost = NULL;
        if (p_gp_flat_logpost == NULL) {
            validateSignature("double(*gp_flat_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_flat_logpost = (Ptr_gp_flat_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_flat_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_flat_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_flatflat_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_flatflat_logpost)(SEXP,SEXP);
        static Ptr_gp_flatflat_logpost p_gp_flatflat_logpost = NULL;
        if (p_gp_flatflat_logpost == NULL) {
            validateSignature("double(*gp_flatflat_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_flatflat_logpost = (Ptr_gp_flatflat_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_flatflat_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_flatflat_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_jeffreys_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_jeffreys_logpost)(SEXP,SEXP);
        static Ptr_gp_jeffreys_logpost p_gp_jeffreys_logpost = NULL;
        if (p_gp_jeffreys_logpost == NULL) {
            validateSignature("double(*gp_jeffreys_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_jeffreys_logpost = (Ptr_gp_jeffreys_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_jeffreys_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_jeffreys_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gp_beta_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gp_beta_logpost)(SEXP,SEXP);
        static Ptr_gp_beta_logpost p_gp_beta_logpost = NULL;
        if (p_gp_beta_logpost == NULL) {
            validateSignature("double(*gp_beta_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_beta_logpost = (Ptr_gp_beta_logpost)R_GetCCallable("revdbayes", "revdbayes_gp_beta_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_beta_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_mdi_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_mdi_logpost)(SEXP,SEXP);
        static Ptr_gev_mdi_logpost p_gev_mdi_logpost = NULL;
        if (p_gev_mdi_logpost == NULL) {
            validateSignature("double(*gev_mdi_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_mdi_logpost = (Ptr_gev_mdi_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_mdi_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_mdi_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_norm_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_norm_logpost)(SEXP,SEXP);
        static Ptr_gev_norm_logpost p_gev_norm_logpost = NULL;
        if (p_gev_norm_logpost == NULL) {
            validateSignature("double(*gev_norm_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_norm_logpost = (Ptr_gev_norm_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_norm_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_norm_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_loglognorm_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_loglognorm_logpost)(SEXP,SEXP);
        static Ptr_gev_loglognorm_logpost p_gev_loglognorm_logpost = NULL;
        if (p_gev_loglognorm_logpost == NULL) {
            validateSignature("double(*gev_loglognorm_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_loglognorm_logpost = (Ptr_gev_loglognorm_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_loglognorm_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_loglognorm_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_flat_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_flat_logpost)(SEXP,SEXP);
        static Ptr_gev_flat_logpost p_gev_flat_logpost = NULL;
        if (p_gev_flat_logpost == NULL) {
            validateSignature("double(*gev_flat_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_flat_logpost = (Ptr_gev_flat_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_flat_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_flat_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_flatflat_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_flatflat_logpost)(SEXP,SEXP);
        static Ptr_gev_flatflat_logpost p_gev_flatflat_logpost = NULL;
        if (p_gev_flatflat_logpost == NULL) {
            validateSignature("double(*gev_flatflat_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_flatflat_logpost = (Ptr_gev_flatflat_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_flatflat_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_flatflat_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double gev_beta_logpost(const Rcpp::NumericVector& x, const Rcpp::List& pars) {
        typedef SEXP(*Ptr_gev_beta_logpost)(SEXP,SEXP);
        static Ptr_gev_beta_logpost p_gev_beta_logpost = NULL;
        if (p_gev_beta_logpost == NULL) {
            validateSignature("double(*gev_beta_logpost)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gev_beta_logpost = (Ptr_gev_beta_logpost)R_GetCCallable("revdbayes", "revdbayes_gev_beta_logpost");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_beta_logpost(Rcpp::wrap(x), Rcpp::wrap(pars));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cpp_logpost_phi(const Rcpp::NumericVector& phi, const Rcpp::List& pars, const SEXP& phi_to_theta_ptr) {
        typedef SEXP(*Ptr_cpp_logpost_phi)(SEXP,SEXP,SEXP);
        static Ptr_cpp_logpost_phi p_cpp_logpost_phi = NULL;
        if (p_cpp_logpost_phi == NULL) {
            validateSignature("double(*cpp_logpost_phi)(const Rcpp::NumericVector&,const Rcpp::List&,const SEXP&)");
            p_cpp_logpost_phi = (Ptr_cpp_logpost_phi)R_GetCCallable("revdbayes", "revdbayes_cpp_logpost_phi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_logpost_phi(Rcpp::wrap(phi), Rcpp::wrap(pars), Rcpp::wrap(phi_to_theta_ptr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP gp_logpost_xptr(std::string fstr) {
        typedef SEXP(*Ptr_gp_logpost_xptr)(SEXP);
        static Ptr_gp_logpost_xptr p_gp_logpost_xptr = NULL;
        if (p_gp_logpost_xptr == NULL) {
            validateSignature("SEXP(*gp_logpost_xptr)(std::string)");
            p_gp_logpost_xptr = (Ptr_gp_logpost_xptr)R_GetCCallable("revdbayes", "revdbayes_gp_logpost_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_logpost_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP gev_logpost_xptr(std::string fstr) {
        typedef SEXP(*Ptr_gev_logpost_xptr)(SEXP);
        static Ptr_gev_logpost_xptr p_gev_logpost_xptr = NULL;
        if (p_gev_logpost_xptr == NULL) {
            validateSignature("SEXP(*gev_logpost_xptr)(std::string)");
            p_gev_logpost_xptr = (Ptr_gev_logpost_xptr)R_GetCCallable("revdbayes", "revdbayes_gev_logpost_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gev_logpost_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector gp_phi_to_theta(const Rcpp::NumericVector& phi, const Rcpp::List& user_args) {
        typedef SEXP(*Ptr_gp_phi_to_theta)(SEXP,SEXP);
        static Ptr_gp_phi_to_theta p_gp_phi_to_theta = NULL;
        if (p_gp_phi_to_theta == NULL) {
            validateSignature("Rcpp::NumericVector(*gp_phi_to_theta)(const Rcpp::NumericVector&,const Rcpp::List&)");
            p_gp_phi_to_theta = (Ptr_gp_phi_to_theta)R_GetCCallable("revdbayes", "revdbayes_gp_phi_to_theta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gp_phi_to_theta(Rcpp::wrap(phi), Rcpp::wrap(user_args));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline SEXP phi_to_theta_xptr(std::string fstr) {
        typedef SEXP(*Ptr_phi_to_theta_xptr)(SEXP);
        static Ptr_phi_to_theta_xptr p_phi_to_theta_xptr = NULL;
        if (p_phi_to_theta_xptr == NULL) {
            validateSignature("SEXP(*phi_to_theta_xptr)(std::string)");
            p_phi_to_theta_xptr = (Ptr_phi_to_theta_xptr)R_GetCCallable("revdbayes", "revdbayes_phi_to_theta_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_phi_to_theta_xptr(Rcpp::wrap(fstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_revdbayes_RCPPEXPORTS_H_GEN_
